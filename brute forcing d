import time

def prime_factors(n):
    i = 2
    factors = []
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors

def brute_d(e, n, ciphertext, plaintext):
    factors = prime_factors(n)
    p, q = factors
    phi_n = (p - 1) * (q - 1)
    d = 1
    iterations = 0
    start_time = time.perf_counter() * 1000

    while True:
        decrypted_message = "".join(chr(pow(char, d, n)) for char in ciphertext)

        if decrypted_message == plaintext and (e * d) % phi_n == 1:
            end_time = time.perf_counter() * 1000
            runtime = end_time - start_time
            print("Decrypted text:", decrypted_message)
            print("d:", d)
            print("Iterations:", iterations)
            print("Runtime:", runtime, "ms")
            return decrypted_message

        d += 1
        iterations += 1

e = 5153
n = 6697
ciphertext = [5458]
plaintext = "6"

brute_d(e, n, ciphertext, plaintext)
